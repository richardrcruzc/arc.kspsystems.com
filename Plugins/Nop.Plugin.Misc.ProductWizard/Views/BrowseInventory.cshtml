@model Nop.Plugin.Misc.ProductWizard.Models.CategoryModel
@using Nop.Web.Extensions
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-category-page");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        Html.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;
}
@*category breadcrumb*@
@*@section Breadcrumb
    {
    @if (Model.DisplayCategoryBreadcrumb)
    {
        <div class="breadcrumb">
            <ul>
                <li>
                    <a href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
                    <span class="delimiter">@breadcrumbDelimiter</span>
                </li>
                @foreach (var cat in Model.CategoryBreadcrumb)
                {
                    var isLastCategory = cat.Id == Model.Id;
                    <li>
                        @if (isLastCategory)
                        {
                            <strong class="current-item">@cat.Name</strong>
                        }
                        else
                        {
                            <a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name">@cat.Name</a>
                            <span class="delimiter">@breadcrumbDelimiter</span>
                        }
                    </li>
                }
            </ul>
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_after_breadcrumb", additionalData = Model.Id })
    }
}*@
<div class="page category-page">
    @*<div class="page-title">
        <h1>@Model.Name</h1>
    </div>*@
    <div class="page-body">
        @*@await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_top", additionalData = Model.Id })*@
        @*description*@
        @*@if (!String.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="category-description">
                @Html.Raw(Model.Description)
            </div>
        }*@
        @*@await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_before_subcategories", additionalData = Model.Id })*@
        @*subcategories*@
        @*@if (Model.SubCategories.Count > 0)
        {
            <div class="category-grid sub-category-grid">
                <div class="item-grid">
                    @foreach (var item in Model.SubCategories)
                    {
                        <div class="item-box">
                            <div class="sub-category-item">
                                <h2 class="title">
                                    <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">
                                        @item.Name
                                    </a>
                                </h2>
                                <div class="picture">
                                    <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">
                                        <img alt="@item.PictureModel.AlternateText" src="@item.PictureModel.ImageUrl" title="@item.PictureModel.Title" />
                                    </a>
                                </div>
                                @await Component.InvokeAsync("Widget", new { widgetZone = "subcategories_itembox_end", additionalData = item.Id })
                            </div>
                        </div>
                    }
                </div>
            </div>
        }*@
        @*@await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_before_featured_products", additionalData = Model.Id })*@
        @*featured products*@
        @*@if (Model.FeaturedProducts.Count > 0)
        {
            <div class="product-grid featured-product-grid">
                <div class="title">
                    <strong>@T("Products.FeaturedProducts")</strong>
                </div>
                <div class="item-grid">
                    @foreach (var item in Model.FeaturedProducts)
                    {
                        <div class="item-box">
                            @await Html.PartialAsync("_ProductBox", item)
                        </div>
                    }
                </div>
            </div>
        }*@
        @*@await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_after_featured_products", additionalData = Model.Id })*@
        @if (Model.Products.Count > 0)
        {
            @await Html.PartialAsync("~/Views/catalog/_CatalogSelectors.cshtml", Model.PagingFilteringContext)
        }
        @*@await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_before_filters", additionalData = Model.Id })*@
        @*<div class="product-filters">
                @if (Model.PagingFilteringContext.PriceRangeFilter.Enabled)
                {
                    @await Html.PartialAsync("_FilterPriceBox", Model.PagingFilteringContext.PriceRangeFilter)
                }
                @if (Model.PagingFilteringContext.SpecificationFilter.Enabled)
                {
                    @await Html.PartialAsync("_FilterSpecsBox", Model.PagingFilteringContext.SpecificationFilter)
                }
            </div>*@
        @*@await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_before_product_list", additionalData = Model.Id })*@

        @if (Model.Products.Count > 0)
        {
            <div class="@(Model.PagingFilteringContext.ViewMode == "list" ? "product-list" : "product-grid")">
                <div class="item-grid">
                    @foreach (var product in Model.Products)
                    {
                        <div class="item-box">
                            @await Html.PartialAsync("_ProductBox", product)
                        </div>
                    }
                </div>
            </div>
        }
        @{
            var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
        }
        @if (!pager.IsEmpty())
        {
            <div class="pager">
                @pager
            </div>
        }
        @*@await Component.InvokeAsync("Widget", new { widgetZone = "categorydetails_bottom", additionalData = Model.Id })*@
    </div>
</div>

@*@section AsidePageTitle
    {
    <div class="page-title">
        <h1>@Model.Name</h1>
    </div>
}*@


@*<link href="~/lib/kendo/2014.1.318/kendo.common.min.css" rel="stylesheet" />
<link href="~/lib/kendo/2014.1.318/kendo.default.min.css" rel="stylesheet" />
<link href="~/lib/kendo/2014.1.318/kendo.default.mobile.min.css" rel="stylesheet" />

<script src="" ="js/kendo.all.min.js"></script>*@
@{

    //    Layout = "~/admin/Views/Shared/_AdminLayout.cshtml";
    var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.Search").Text);
    //page class
    Html.AppendPageCssClassParts("html-search-page");
}

@*<div class="page search-page">
    <div class="page-body">
        <div class="title"><strong>Search Results</strong></div>


        <div id="categories"></div>


    </div>
</div>*@

@*<script>
        $(document).ready(function () {

            $("#categories").kendoGrid({
                autoBind: true,
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                         url: "@Html.Raw(Url.Action("FrontSearch", "PartsForItem"))",
                                            type: "POST",
                                            dataType: "json",
                                            data: additionalData
                                    }
                                },
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors",
                                    model: {
                                        id: "Id",
                                        fields: {
                                            ThumbImageUrl: { editable: false },
                                            Category: { editable: false },
                                            ProductName: { editable: false },
                                            PartNumber: { editable: false },
                                            Manufacturer: { editable: false },
                                            Price: { editable: false },
                                            Qty: { editable: true, type: "number", validation: { required: true, min: 1 } },
                                            Id: { editable: false, type: "number" },
                                            SeName: { editable: false },
                                            CategorySeo: { editable: false },
                                            OutOfStock: { editable: false, type:"bool" },
                                        }
                                     }
                                },
                                 error: function(e) {
                                        display_kendoui_grid_error(e);
                                        // Cancel the changes
                                        this.cancelChanges();
                                    },
                                    pageSize: @(defaultGridPageSize),
                                    serverPaging: true,
                                    serverFiltering: true,
                                    serverSorting: true,
                                    group: { field: "Category", template: '<a href="#:CategorySeo#">#=Category#</a>' },
                            },

                            editable: "inline",
                            pageable: {
                                    refresh: true,
                                    pageSizes: [@(gridPageSizes)],
                                    @Html.Partial("_GridPagerMessages")
                            },
                          //   rowTemplate: kendo.template($("#rowTemplate").html()),
                            //altRowTemplate: kendo.template($("#altRowTemplate").html()),
                //             dataBound: function () {
                //                 var grid = $("#categories").data("kendoGrid");
                //    for (var i = 0; i < grid.columns.length; i++) {
                //        grid.autoFitColumn(i);
                //    }
                //},
                            resizable: true,
                            mobile: true,
                            columns: [
                                {
                                    field: "ThumbImageUrl",
                                            title: "@T("Admin.Catalog.Products.Fields.PictureThumbnailUrl")",
                                            template: '<a href="/#:NewSeName#"><img src="#=ThumbImageUrl#" style="width: 100%;  height: auto;"/></a>',
                                            width: "15%",
                                },
                                {
                                    field: "ProductName",
                                    title: "Name",
                                    template: '<a href="/#:NewSeName#">#:ProductName#<br><span class="item_details_link_info"><img src="/images/magnify_plus.gif" alt="view details"> view details...</span> </a> ',
                                    width: "35%",

                                },
                                {
                                    field: "PartNumber",
                                    title: "Part #",
                                    width: "10%",
                                    minScreenWidth: 769,

                                },
                                {
                                    field: "Manufacturer",
                                    title: "Manufacturer",
                                    width: "10%",
                                    minScreenWidth: 769,
                                },
                                {
                                    field: "Category",
                                    title: "Category",
                                    template: '<a href="#:CategorySeo#">#=Category#</a>',
                                    width: "10%",
                                    minScreenWidth: 769,

                                },
                                {
                                    field: "Price",
                                    title: "Price",
                                    format: "{0:c}",
                                    attributes: { style: "text-align:right" },
                                    width: 65

                                }, {
                                    field: "Qty",
                                    title: "Qty",
                                    attributes: { style: "text-align:right" },
                                    template: '<table  border="1"><tr><td style="border-collapse: collapse;border: 1px solid black;">#:Qty#</td></tr></table>',
                                    width: 65

                                },  {
                                    field: "Id",
                                    title: "Buy Now",
                                    headerAttributes: { style: "text-align:center" },
                                    attributes: { style: "text-align:center" },
                                    template: '# if (OutOfStock) { #<input class="btn btn-xs btn-default" type="image" src="/images/call_button.gif"># } else { # <a class="btn btn-xs btn-default" href="\\#" onclick="rowclick(this);"  title="Edit">&nbsp;<input type="image" class="addToCartbutton" id="addToCartbutton" src="/images/add-btn-small.png"></a># } #',
                                    attributes: { style: "text-align:center" },
                                    width: 65,
                                       },

                            ],
                            editable: true
            });


            var grid = $('#categories').data('kendoGrid');
            grid.thead.closest(".k-grid-header").css("padding-right", kendo.support.scrollbar(true));


        });

        function rowclick(sender) {
            var grid = $('#categories').data('kendoGrid');

            if (grid) {
                var data = grid.dataItem($(sender).closest("tr"));
                if (data) {
                    //  alert("You clicked " + data.Qty + " for Id : " + data.Id);
                    //AjaxCart.addproducttocart_catalog(productId);
                    //AjaxCart.addproducttocart_details('/addproducttocart/details/'++'/1', '#product-details-form')
                    // addtocartlink = 'Url.RouteUrl("AddProductToCart-Catalog", new { productId = data.Id, shoppingCartTypeId = 1, quantity = data.Qty, forceredirection = false})';

                    // alert(addtocartlink);

                    var productId = data.Id;
                    var shoppingCartTypeId = 1;
                    var quantity = data.Qty;
                    var forceredirection = false
                   // alert(data.Qty);
                    var url = '/ShoppingCart/AddProductToCart_Catalog?productId=' + data.Id + '&shoppingCartTypeId=1&quantity=' + data.Qty + '&forceredirection=false';
                        //alert(url);
                    $.ajax({
                        cache: false,
                        url: url,
                        type: 'post',
                        success: function (result) {
                            //alert('product added');
                        },
                        complete: function (result) {/* alert('results')*/},
                        error: function (result) { alert('error adding product to shopping cart'); }
                    });

                }
                else
                    alert("Why isn't my row selected!");
            }


        };
        function additionalData() {
            var brand = $("#Brands").val();
            var copier = @ViewBag.Rid;
            var category = @ViewBag.Cid;
            var data = {
                rid: copier,
                cid: category
            };
            addAntiForgeryToken(data);
            return data;
        }
</script>*@
